AWSTemplateFormatVersion: '2010-09-09'
Description: 'Chainlit RAG知识库系统 - 主要基础设施栈'

Parameters:
  ProjectName:
    Type: String
    Default: chainlit-rag-kb
    Description: 项目名称，用于资源命名

  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: 环境名称

  OpenAIApiKey:
    Type: String
    NoEcho: true
    Description: OpenAI API密钥

Resources:
  # S3存储桶 - 文档存储
  DocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-documents-${Environment}-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3000

  # DynamoDB表 - 用户信息
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-users-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: email-index
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # DynamoDB表 - 文档信息
  DocumentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-documents-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: document_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: document_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: user-id-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # DynamoDB表 - 聊天历史
  ChatHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-chat-history-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: message_id
          AttributeType: S
        - AttributeName: conversation_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      KeySchema:
        - AttributeName: message_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: conversation-id-index
          KeySchema:
            - AttributeName: conversation_id
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: user-id-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Lambda执行角色
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-lambda-execution-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt UsersTable.Arn
                  - !GetAtt DocumentsTable.Arn
                  - !GetAtt ChatHistoryTable.Arn
                  - !Sub '${UsersTable.Arn}/index/*'
                  - !Sub '${DocumentsTable.Arn}/index/*'
                  - !Sub '${ChatHistoryTable.Arn}/index/*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:GetObjectVersion
                Resource: !Sub '${DocumentsBucket}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetBucketLocation
                Resource: !GetAtt DocumentsBucket.Arn
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref OpenAIApiKeySecret

  # Secrets Manager - OpenAI API密钥
  OpenAIApiKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ProjectName}/openai-api-key/${Environment}'
      Description: 'OpenAI API密钥'
      SecretString: !Sub |
        {
          "api_key": "${OpenAIApiKey}"
        }
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # SQS队列 - 文档处理
  DocumentProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${ProjectName}-document-processing-${Environment}'
      VisibilityTimeoutSeconds: 300
      MessageRetentionPeriod: 1209600  # 14天
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DocumentProcessingDLQ.Arn
        maxReceiveCount: 3
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # SQS死信队列
  DocumentProcessingDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${ProjectName}-document-processing-dlq-${Environment}'
      MessageRetentionPeriod: 1209600  # 14天
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Lambda函数 - 用户认证
  AuthLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-auth-${Environment}'
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': 'Auth function placeholder'
              }
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
          JWT_SECRET: !Sub '${ProjectName}-jwt-secret-${Environment}'
          ENVIRONMENT: !Ref Environment
      Timeout: 30
      MemorySize: 512
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Lambda函数 - 聊天处理
  ChatLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-chat-${Environment}'
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': 'Chat function placeholder'
              }
      Environment:
        Variables:
          CHAT_HISTORY_TABLE: !Ref ChatHistoryTable
          DOCUMENTS_TABLE: !Ref DocumentsTable
          OPENAI_SECRET_ARN: !Ref OpenAIApiKeySecret
          ENVIRONMENT: !Ref Environment
      Timeout: 300
      MemorySize: 1024
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Lambda函数 - 文档处理
  DocumentProcessingLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-document-processing-${Environment}'
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': 'Document processing function placeholder'
              }
      Environment:
        Variables:
          DOCUMENTS_TABLE: !Ref DocumentsTable
          DOCUMENTS_BUCKET: !Ref DocumentsBucket
          PROCESSING_QUEUE: !Ref DocumentProcessingQueue
          OPENAI_SECRET_ARN: !Ref OpenAIApiKeySecret
          ENVIRONMENT: !Ref Environment
      Timeout: 900  # 15分钟
      MemorySize: 2048
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Lambda函数 - 向量搜索
  VectorSearchLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-vector-search-${Environment}'
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': 'Vector search function placeholder'
              }
      Environment:
        Variables:
          DOCUMENTS_TABLE: !Ref DocumentsTable
          OPENAI_SECRET_ARN: !Ref OpenAIApiKeySecret
          ENVIRONMENT: !Ref Environment
      Timeout: 60
      MemorySize: 1024
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # API Gateway - REST API
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-api-${Environment}'
      Description: 'Chainlit RAG知识库系统API'
      EndpointConfiguration:
        Types:
          - REGIONAL
      BinaryMediaTypes:
        - 'multipart/form-data'
        - 'application/octet-stream'

  # API Gateway - Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - AuthResource
      - ChatResource
      - DocumentsResource
      - VectorSearchResource
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment

  # API Gateway - 认证资源
  AuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: auth

  AuthMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref AuthResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations'
          - LambdaArn: !GetAtt AuthLambdaFunction.Arn

  # API Gateway - 聊天资源
  ChatResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: chat

  ChatMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ChatResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations'
          - LambdaArn: !GetAtt ChatLambdaFunction.Arn

  # API Gateway - 文档资源
  DocumentsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: documents

  DocumentsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref DocumentsResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations'
          - LambdaArn: !GetAtt DocumentProcessingLambdaFunction.Arn

  # API Gateway - 向量搜索资源
  VectorSearchResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: search

  VectorSearchMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref VectorSearchResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations'
          - LambdaArn: !GetAtt VectorSearchLambdaFunction.Arn

  # Lambda权限 - API Gateway调用
  AuthLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AuthLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${ApiGateway}/*/*/*'

  ChatLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ChatLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${ApiGateway}/*/*/*'

  DocumentProcessingLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DocumentProcessingLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${ApiGateway}/*/*/*'

  VectorSearchLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref VectorSearchLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${ApiGateway}/*/*/*'

  # SQS触发器 - 文档处理
  DocumentProcessingEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt DocumentProcessingQueue.Arn
      FunctionName: !Ref DocumentProcessingLambdaFunction
      BatchSize: 1
      MaximumBatchingWindowInSeconds: 5

Outputs:
  ApiGatewayUrl:
    Description: 'API Gateway URL'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${ProjectName}-api-url-${Environment}'

  DocumentsBucketName:
    Description: 'S3文档存储桶名称'
    Value: !Ref DocumentsBucket
    Export:
      Name: !Sub '${ProjectName}-documents-bucket-${Environment}'

  UsersTableName:
    Description: 'DynamoDB用户表名称'
    Value: !Ref UsersTable
    Export:
      Name: !Sub '${ProjectName}-users-table-${Environment}'

  DocumentsTableName:
    Description: 'DynamoDB文档表名称'
    Value: !Ref DocumentsTable
    Export:
      Name: !Sub '${ProjectName}-documents-table-${Environment}'

  ChatHistoryTableName:
    Description: 'DynamoDB聊天历史表名称'
    Value: !Ref ChatHistoryTable
    Export:
      Name: !Sub '${ProjectName}-chat-history-table-${Environment}'

  DocumentProcessingQueueUrl:
    Description: 'SQS文档处理队列URL'
    Value: !Ref DocumentProcessingQueue
    Export:
      Name: !Sub '${ProjectName}-processing-queue-url-${Environment}'

  OpenAISecretArn:
    Description: 'OpenAI API密钥Secret ARN'
    Value: !Ref OpenAIApiKeySecret
    Export:
      Name: !Sub '${ProjectName}-openai-secret-arn-${Environment}'